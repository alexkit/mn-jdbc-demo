package com.example

import groovy.sql.Sql
import io.micronaut.runtime.EmbeddedApplication
import io.micronaut.test.extensions.spock.annotation.MicronautTest
import spock.lang.Specification
import jakarta.inject.Inject


import javax.sql.DataSource

@MicronautTest
class MnJdbcDemoSpec extends Specification {

    @Inject
    EmbeddedApplication<?> application

    void 'test it works'() {
        expect:
        application.running
    }

    @Inject
    DataSource dataSource

    void 'test DataSource is created'() {
        given:
        def sql = new Sql(dataSource)
        assert sql != null

        sql.execute '''
  CREATE TABLE Author (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    firstname   VARCHAR(64),
    lastname    VARCHAR(64)
  );
'''

        def res

        res = sql.executeInsert "INSERT INTO Author (firstname, lastname) VALUES ('Dierk', 'Koenig')"
        println "Inserted record ID: ${res[0][0]}"
        res = sql.executeInsert "INSERT INTO Author (id, firstname, lastname) VALUES (111, 'Alex', 'Kovacs')"
        println "Inserted record ID: ${res[0][0]}"

        def count = sql.executeUpdate("UPDATE Author set firstname='Alex2' WHERE firstname='Alex'")
        assert count == 1
        println "Updated record: ${count==1}"

        res = sql.execute("DELETE FROM Author WHERE ID=111")
        println res

        sql.eachRow("select * from Author",  {row ->
            println(row)
        })

        println "batch processing:"
        sql.withBatch(3) { stmt ->
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Dierk', 'Koenig')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Paul', 'King')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Guillaume', 'Laforge')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Hamlet', 'D''Arcy')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Cedric', 'Champeau')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Erik', 'Pragt')"
            stmt.addBatch "INSERT INTO Author (firstname, lastname) VALUES ('Jon', 'Skeet')"
        }

        sql.eachRow("select * from Author",  {row ->
            println(row)
        })

        expect:
        assert dataSource != null
    }
}
